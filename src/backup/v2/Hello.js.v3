import React from "react";

function forwardRefHOC(WrappedComponent) {
	class LogMessage extends React.Component {
		constructor() {
			super();
			this.state = {
				counter: 0
			};
		}

		componentDidMount() {
			this.updateState();
		}

		updateState(){
			this.setState({counter: this.state.counter + 1});
		}

		componentDidUpdate(previousProps, previousState){
			console.log(7, previousState);
			console.log(8, previousProps);
		}

		handleChange = event => {
			const { onChange } = this.props;  
			const { target: { name, value } } = event;

			this.updateState();
			onChange(name, value);
		}

		render() {
			const { errorMessage, valid } = this.state;
			const {forwardedRef, ...rest} = this.props;
			return <WrappedComponent ref={forwardedRef} {...rest} onChange={this.handleChange} />
		}
	};

	return React.forwardRef((props, ref) => {
		return (<LogMessage {...props} forwardedRef={ref} />);
    });
}

// const FormField = (props)=>{
const FormField = React.forwardRef((props, ref)=>{
	const {label, name, ...rest } = props;
	return (
		<div>
			<label htmlFor={name}>{label}</label>
			<input id={name} name={name} ref={ref} {...rest} />
		</div>
	);
});

const FieldWithValidation = forwardRefHOC(FormField);

class Form extends React.Component {
	constructor() {
		super();
		this.inputRef = React.createRef();

		this.state = {
			counter: 0
		};
	}

	handleChangeInForm = (name, value) => {
		console.log(69, name, value);
		console.log(70, this.inputRef.current.value);
	};

	render() {
		return (
			<FieldWithValidation
				ref={this.inputRef}
				name="firstField"
				label="Please type in:"
				onChange={this.handleChangeInForm}
			/>
		);
	}
}

export default Form;

